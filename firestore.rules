rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }
    
    // Users can read/write their own food diary entries
    match /foodDiary/{entryId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Users can read/write their own daily health metrics (water, steps, sleep)
    match /dailyHealthMetrics/{metricId} {
      // Allow reading if the user's ID is in the document ID, which is structured as {userId}_{date}
      allow read: if request.auth != null && metricId.split('_')[0] == request.auth.uid;

      // Allow creating and updating (for set with merge).
      // This checks the incoming document's data for the correct userId.
      allow create, update: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Note: delete is intentionally not allowed by this rule.
    }

    // Users can read/write their own health metrics
    match /healthMetrics/{metricId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Users can read/write their own favorite recipes
    match /favoriteRecipes/{recipeId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Users can read/write their own goals
    match /userGoals/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public read access for shared recipes, write for authenticated users
    match /sharedRecipes/{recipeId} {
      allow read: if resource.data.isPublic == true || request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // User sessions for analytics
    match /userSessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Marketing consent data
    match /marketingConsent/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Publicly readable content managed by admin
    match /announcements/{docId} {
      allow read: if request.auth != null;
    }
    match /healthTips/{docId} {
      allow read: if request.auth != null;
    }
    match /successStories/{docId} {
      allow read: if request.auth != null;
    }
    match /updates/{docId} {
      allow read: if request.auth != null;
    }
    
    // Default fallback rule for anything else (deny all)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}